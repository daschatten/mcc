<?php

// uncomment the following to define a path alias
// Yii::setPathOfAlias('local','path/to/local-folder');

// This is the main Web application configuration. Any writable
// CWebApplication properties can be configured here.
return array(
	'basePath'=>dirname(__FILE__).DIRECTORY_SEPARATOR.'..',
	'name'=>'MCC - MythTV Control Center',

	// preloading 'log' component
	'preload'=>array('log'),

    // path aliases
    'aliases' => array(
        'bootstrap' => realpath(__DIR__ . '/../extensions/bootstrap'), // yiistrap alias
    ),

	// autoloading model and component classes
	'import'=>array(
		'application.models.*',
		'application.models.mythtv.*',
		'application.components.*',
		'application.controllers.*',
        'ext.giix-components.*', // giix components
        'bootstrap.helpers.TbHtml', // yiistrap components
        'application.modules.auth.*',
        'application.modules.auth.components.*',
		'application.components.mythservices.*',
	),

	'modules'=>array(
		// uncomment the following to enable the Gii tool
		/*
		'gii'=>array(
			'class'=>'system.gii.GiiModule',
			'password'=>'mygii',
			// If removed, Gii defaults to localhost only. Edit carefully to taste.
			'ipFilters'=>array('127.0.0.1','::1'),
            'generatorPaths' => array(
                        'ext.giix-core', // giix generators
                        'bootstrap.gii', // yiistrap generators
            ),
		),
        */
        'auth' => array(
            'strictMode' => true, // when enabled authorization items cannot be assigned children of the same type.
            'userClass' => 'User', // the name of the user model class.
            'userIdColumn' => 'id', // the name of the user id column.
            'userNameColumn' => 'username', // the name of the user name column.
            'defaultLayout' => 'application.views.layouts.main', // the layout used by the module.
            'viewDir' => null, // the path to view files to use with this module. 
        ),
	),

	// application components
	'components'=>array(
        'authManager' => array(
            'class' => 'auth.components.CachedDbAuthManager',
            'assignmentTable' => 'mcc_authassignment',
            'itemTable' => 'mcc_authitem',
            'itemChildTable' => 'mcc_authitemchild',
            'behaviors' => array(
                'auth' => array(
                    'class' => 'auth.components.AuthBehavior',
                ),
            ),
        ),
		'user'=>array(
			// enable cookie-based authentication
			'allowAutoLogin'=>true,
            'class' => 'auth.components.AuthWebUser',
		),
		// uncomment the following to enable URLs in path-format
		
		'urlManager'=>array(
			'urlFormat'=>'path',
			'rules'=>array(
				'<controller:\w+>/<id:\d+>'=>'<controller>/view',
				'<controller:\w+>/<action:\w+>/<id:\d+>'=>'<controller>/<action>',
				'<controller:\w+>/<action:\w+>'=>'<controller>/<action>',
			),
		),
		
		'db'=>array(
			'connectionString' => 'mysql:host=mythtv.db.host;dbname=mythtv',
			'emulatePrepare' => true,
			'username' => 'mcc',
			'password' => 'mcc',
			'charset' => 'utf8',
		),
		
		'errorHandler'=>array(
			// use 'site/error' action to display errors
			'errorAction'=>'site/error',
		),
		'log'=>array(
			'class'=>'CLogRouter',
			'routes'=>array(
				array(
					'class'=>'CFileLogRoute',
					'levels'=>'error, warning, trace',
				),
				// uncomment the following to show log messages on web pages
				/*
				array(
					'class'=>'CWebLogRoute',
				),
				*/
			),
		),
        'bootstrap' => array(
            'class' => 'bootstrap.components.TbApi',   
        ),
	),

	// application-level parameters that can be accessed
	// using Yii::app()->params['paramName']
	'params'=>array(
		// this is used in contact page
		'adminEmail'=>'webmaster@example.com',              // webmaster mail address (not used ATM)
        'defaultPageSize' => 10,                            // default paging size
        'mediaUrl' => 'http://mcc.example.com/media/',      // url where the mythtv recordings dir is available (only one storage group is supported ATM)
        'mythbackendUri' => 'http://<mythtv.host>:6544',    // url to mythbackend webservice
        'archive.source.path' => '/mnt/src/',
        'archive.dest.path' => '/mnt/dest/',
        /*
         * Each array in 'recordItems' defines a "One-Click" recording button.
         * 'name': Name to be displayed.
         * 'rulename': Rule name you defined in mythtv. Can also be found in database in table 'record', each entry with type '11' should be a template.
         * 'ruletype': 
         *      1 = record this (at the time specified)
         *      3 = record each (record each episode)
         *      6 = record once (record once at any time)
         *      11 = template (should not be used here)
         */
        'recordItems' => array(
            array(  'name' => 'Default',
                    'rulename' => 'Default (Template)',
                    'ruletype' => '1',
            ),
        ),
	),
);
