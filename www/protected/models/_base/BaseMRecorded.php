<?php

/**
 * This is the model base class for the table "recorded".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "MRecorded".
 *
 * Columns in table "recorded" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $chanid
 * @property string $starttime
 * @property string $endtime
 * @property string $title
 * @property string $subtitle
 * @property string $description
 * @property integer $season
 * @property integer $episode
 * @property string $category
 * @property string $hostname
 * @property integer $bookmark
 * @property string $editing
 * @property integer $cutlist
 * @property integer $autoexpire
 * @property string $commflagged
 * @property string $recgroup
 * @property integer $recordid
 * @property string $seriesid
 * @property string $programid
 * @property string $inetref
 * @property string $lastmodified
 * @property string $filesize
 * @property double $stars
 * @property integer $previouslyshown
 * @property string $originalairdate
 * @property integer $preserve
 * @property integer $findid
 * @property integer $deletepending
 * @property integer $transcoder
 * @property double $timestretch
 * @property integer $recpriority
 * @property string $basename
 * @property string $progstart
 * @property string $progend
 * @property string $playgroup
 * @property string $profile
 * @property integer $duplicate
 * @property integer $transcoded
 * @property integer $watched
 * @property string $storagegroup
 * @property string $bookmarkupdate
 *
 */
abstract class BaseMRecorded extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'recorded';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'MRecorded|MRecordeds', $n);
	}

	public static function representingColumn() {
		return 'endtime';
	}

	public function rules() {
		return array(
			array('season, episode, inetref, lastmodified, basename', 'required'),
			array('season, episode, bookmark, cutlist, autoexpire, recordid, previouslyshown, preserve, findid, deletepending, transcoder, recpriority, duplicate, transcoded, watched', 'numerical', 'integerOnly'=>true),
			array('stars, timestretch', 'numerical'),
			array('chanid, editing, commflagged', 'length', 'max'=>10),
			array('title, subtitle', 'length', 'max'=>128),
			array('description', 'length', 'max'=>16000),
			array('category, hostname', 'length', 'max'=>64),
			array('recgroup, playgroup, profile, storagegroup', 'length', 'max'=>32),
			array('seriesid, programid, inetref', 'length', 'max'=>40),
			array('filesize', 'length', 'max'=>20),
			array('basename', 'length', 'max'=>255),
			array('endtime, originalairdate, progstart, progend, bookmarkupdate', 'safe'),
			array('chanid, starttime, endtime, title, subtitle, description, category, hostname, bookmark, editing, cutlist, autoexpire, commflagged, recgroup, recordid, seriesid, programid, filesize, stars, previouslyshown, originalairdate, preserve, findid, deletepending, transcoder, timestretch, recpriority, progstart, progend, playgroup, profile, duplicate, transcoded, watched, storagegroup, bookmarkupdate', 'default', 'setOnEmpty' => true, 'value' => null),
			array('chanid, starttime, endtime, title, subtitle, description, season, episode, category, hostname, bookmark, editing, cutlist, autoexpire, commflagged, recgroup, recordid, seriesid, programid, inetref, lastmodified, filesize, stars, previouslyshown, originalairdate, preserve, findid, deletepending, transcoder, timestretch, recpriority, basename, progstart, progend, playgroup, profile, duplicate, transcoded, watched, storagegroup, bookmarkupdate', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'chanid' => Yii::t('app', 'Chanid'),
			'starttime' => Yii::t('app', 'Starttime'),
			'endtime' => Yii::t('app', 'Endtime'),
			'title' => Yii::t('app', 'Title'),
			'subtitle' => Yii::t('app', 'Subtitle'),
			'description' => Yii::t('app', 'Description'),
			'season' => Yii::t('app', 'Season'),
			'episode' => Yii::t('app', 'Episode'),
			'category' => Yii::t('app', 'Category'),
			'hostname' => Yii::t('app', 'Hostname'),
			'bookmark' => Yii::t('app', 'Bookmark'),
			'editing' => Yii::t('app', 'Editing'),
			'cutlist' => Yii::t('app', 'Cutlist'),
			'autoexpire' => Yii::t('app', 'Autoexpire'),
			'commflagged' => Yii::t('app', 'Commflagged'),
			'recgroup' => Yii::t('app', 'Recgroup'),
			'recordid' => Yii::t('app', 'Recordid'),
			'seriesid' => Yii::t('app', 'Seriesid'),
			'programid' => Yii::t('app', 'Programid'),
			'inetref' => Yii::t('app', 'Inetref'),
			'lastmodified' => Yii::t('app', 'Lastmodified'),
			'filesize' => Yii::t('app', 'Filesize'),
			'stars' => Yii::t('app', 'Stars'),
			'previouslyshown' => Yii::t('app', 'Previouslyshown'),
			'originalairdate' => Yii::t('app', 'Originalairdate'),
			'preserve' => Yii::t('app', 'Preserve'),
			'findid' => Yii::t('app', 'Findid'),
			'deletepending' => Yii::t('app', 'Deletepending'),
			'transcoder' => Yii::t('app', 'Transcoder'),
			'timestretch' => Yii::t('app', 'Timestretch'),
			'recpriority' => Yii::t('app', 'Recpriority'),
			'basename' => Yii::t('app', 'Basename'),
			'progstart' => Yii::t('app', 'Progstart'),
			'progend' => Yii::t('app', 'Progend'),
			'playgroup' => Yii::t('app', 'Playgroup'),
			'profile' => Yii::t('app', 'Profile'),
			'duplicate' => Yii::t('app', 'Duplicate'),
			'transcoded' => Yii::t('app', 'Transcoded'),
			'watched' => Yii::t('app', 'Watched'),
			'storagegroup' => Yii::t('app', 'Storagegroup'),
			'bookmarkupdate' => Yii::t('app', 'Bookmarkupdate'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('chanid', $this->chanid, true);
		$criteria->compare('starttime', $this->starttime, true);
		$criteria->compare('endtime', $this->endtime, true);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('subtitle', $this->subtitle, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('season', $this->season);
		$criteria->compare('episode', $this->episode);
		$criteria->compare('category', $this->category, true);
		$criteria->compare('hostname', $this->hostname, true);
		$criteria->compare('bookmark', $this->bookmark);
		$criteria->compare('editing', $this->editing, true);
		$criteria->compare('cutlist', $this->cutlist);
		$criteria->compare('autoexpire', $this->autoexpire);
		$criteria->compare('commflagged', $this->commflagged, true);
		$criteria->compare('recgroup', $this->recgroup, true);
		$criteria->compare('recordid', $this->recordid);
		$criteria->compare('seriesid', $this->seriesid, true);
		$criteria->compare('programid', $this->programid, true);
		$criteria->compare('inetref', $this->inetref, true);
		$criteria->compare('lastmodified', $this->lastmodified, true);
		$criteria->compare('filesize', $this->filesize, true);
		$criteria->compare('stars', $this->stars);
		$criteria->compare('previouslyshown', $this->previouslyshown);
		$criteria->compare('originalairdate', $this->originalairdate, true);
		$criteria->compare('preserve', $this->preserve);
		$criteria->compare('findid', $this->findid);
		$criteria->compare('deletepending', $this->deletepending);
		$criteria->compare('transcoder', $this->transcoder);
		$criteria->compare('timestretch', $this->timestretch);
		$criteria->compare('recpriority', $this->recpriority);
		$criteria->compare('basename', $this->basename, true);
		$criteria->compare('progstart', $this->progstart, true);
		$criteria->compare('progend', $this->progend, true);
		$criteria->compare('playgroup', $this->playgroup, true);
		$criteria->compare('profile', $this->profile, true);
		$criteria->compare('duplicate', $this->duplicate);
		$criteria->compare('transcoded', $this->transcoded);
		$criteria->compare('watched', $this->watched);
		$criteria->compare('storagegroup', $this->storagegroup, true);
		$criteria->compare('bookmarkupdate', $this->bookmarkupdate, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}
