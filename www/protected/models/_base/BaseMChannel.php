<?php

/**
 * This is the model base class for the table "channel".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "MChannel".
 *
 * Columns in table "channel" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $chanid
 * @property string $channum
 * @property string $freqid
 * @property string $sourceid
 * @property string $callsign
 * @property string $name
 * @property string $icon
 * @property integer $finetune
 * @property string $videofilters
 * @property string $xmltvid
 * @property integer $recpriority
 * @property integer $contrast
 * @property integer $brightness
 * @property integer $colour
 * @property integer $hue
 * @property string $tvformat
 * @property integer $visible
 * @property string $outputfilters
 * @property integer $useonairguide
 * @property integer $mplexid
 * @property integer $serviceid
 * @property integer $tmoffset
 * @property string $atsc_major_chan
 * @property string $atsc_minor_chan
 * @property string $last_record
 * @property string $default_authority
 * @property integer $commmethod
 * @property integer $iptvid
 *
 */
abstract class BaseMChannel extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'channel';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'MChannel|MChannels', $n);
	}

	public static function representingColumn() {
		return 'channum';
	}

	public function rules() {
		return array(
			array('last_record', 'required'),
			array('finetune, recpriority, contrast, brightness, colour, hue, visible, useonairguide, mplexid, serviceid, tmoffset, commmethod, iptvid', 'numerical', 'integerOnly'=>true),
			array('chanid, channum, freqid, sourceid, tvformat, atsc_major_chan, atsc_minor_chan', 'length', 'max'=>10),
			array('callsign', 'length', 'max'=>20),
			array('name', 'length', 'max'=>64),
			array('icon, videofilters, xmltvid, outputfilters', 'length', 'max'=>255),
			array('default_authority', 'length', 'max'=>32),
			array('chanid, channum, freqid, sourceid, callsign, name, icon, finetune, videofilters, xmltvid, recpriority, contrast, brightness, colour, hue, tvformat, visible, outputfilters, useonairguide, mplexid, serviceid, tmoffset, atsc_major_chan, atsc_minor_chan, default_authority, commmethod, iptvid', 'default', 'setOnEmpty' => true, 'value' => null),
			array('chanid, channum, freqid, sourceid, callsign, name, icon, finetune, videofilters, xmltvid, recpriority, contrast, brightness, colour, hue, tvformat, visible, outputfilters, useonairguide, mplexid, serviceid, tmoffset, atsc_major_chan, atsc_minor_chan, last_record, default_authority, commmethod, iptvid', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'chanid' => Yii::t('app', 'Chanid'),
			'channum' => Yii::t('app', 'Channum'),
			'freqid' => Yii::t('app', 'Freqid'),
			'sourceid' => Yii::t('app', 'Sourceid'),
			'callsign' => Yii::t('app', 'Callsign'),
			'name' => Yii::t('app', 'Name'),
			'icon' => Yii::t('app', 'Icon'),
			'finetune' => Yii::t('app', 'Finetune'),
			'videofilters' => Yii::t('app', 'Videofilters'),
			'xmltvid' => Yii::t('app', 'Xmltvid'),
			'recpriority' => Yii::t('app', 'Recpriority'),
			'contrast' => Yii::t('app', 'Contrast'),
			'brightness' => Yii::t('app', 'Brightness'),
			'colour' => Yii::t('app', 'Colour'),
			'hue' => Yii::t('app', 'Hue'),
			'tvformat' => Yii::t('app', 'Tvformat'),
			'visible' => Yii::t('app', 'Visible'),
			'outputfilters' => Yii::t('app', 'Outputfilters'),
			'useonairguide' => Yii::t('app', 'Useonairguide'),
			'mplexid' => Yii::t('app', 'Mplexid'),
			'serviceid' => Yii::t('app', 'Serviceid'),
			'tmoffset' => Yii::t('app', 'Tmoffset'),
			'atsc_major_chan' => Yii::t('app', 'Atsc Major Chan'),
			'atsc_minor_chan' => Yii::t('app', 'Atsc Minor Chan'),
			'last_record' => Yii::t('app', 'Last Record'),
			'default_authority' => Yii::t('app', 'Default Authority'),
			'commmethod' => Yii::t('app', 'Commmethod'),
			'iptvid' => Yii::t('app', 'Iptvid'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('chanid', $this->chanid, true);
		$criteria->compare('channum', $this->channum, true);
		$criteria->compare('freqid', $this->freqid, true);
		$criteria->compare('sourceid', $this->sourceid, true);
		$criteria->compare('callsign', $this->callsign, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('icon', $this->icon, true);
		$criteria->compare('finetune', $this->finetune);
		$criteria->compare('videofilters', $this->videofilters, true);
		$criteria->compare('xmltvid', $this->xmltvid, true);
		$criteria->compare('recpriority', $this->recpriority);
		$criteria->compare('contrast', $this->contrast);
		$criteria->compare('brightness', $this->brightness);
		$criteria->compare('colour', $this->colour);
		$criteria->compare('hue', $this->hue);
		$criteria->compare('tvformat', $this->tvformat, true);
		$criteria->compare('visible', $this->visible);
		$criteria->compare('outputfilters', $this->outputfilters, true);
		$criteria->compare('useonairguide', $this->useonairguide);
		$criteria->compare('mplexid', $this->mplexid);
		$criteria->compare('serviceid', $this->serviceid);
		$criteria->compare('tmoffset', $this->tmoffset);
		$criteria->compare('atsc_major_chan', $this->atsc_major_chan, true);
		$criteria->compare('atsc_minor_chan', $this->atsc_minor_chan, true);
		$criteria->compare('last_record', $this->last_record, true);
		$criteria->compare('default_authority', $this->default_authority, true);
		$criteria->compare('commmethod', $this->commmethod);
		$criteria->compare('iptvid', $this->iptvid);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}