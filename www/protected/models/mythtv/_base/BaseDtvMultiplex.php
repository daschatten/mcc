<?php

/**
 * This is the model base class for the table "dtv_multiplex".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "DtvMultiplex".
 *
 * Columns in table "dtv_multiplex" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $mplexid
 * @property integer $sourceid
 * @property integer $transportid
 * @property integer $networkid
 * @property integer $frequency
 * @property string $inversion
 * @property integer $symbolrate
 * @property string $fec
 * @property string $polarity
 * @property string $modulation
 * @property string $bandwidth
 * @property string $lp_code_rate
 * @property string $transmission_mode
 * @property string $guard_interval
 * @property integer $visible
 * @property string $constellation
 * @property string $hierarchy
 * @property string $hp_code_rate
 * @property string $mod_sys
 * @property string $rolloff
 * @property string $sistandard
 * @property integer $serviceversion
 * @property string $updatetimestamp
 * @property string $default_authority
 *
 */
abstract class BaseDtvMultiplex extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'dtv_multiplex';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'DtvMultiplex|DtvMultiplexes', $n);
	}

	public static function representingColumn() {
		return 'updatetimestamp';
	}

	public function rules() {
		return array(
			array('updatetimestamp', 'required'),
			array('sourceid, transportid, networkid, frequency, symbolrate, visible, serviceversion', 'numerical', 'integerOnly'=>true),
			array('inversion, polarity, bandwidth, transmission_mode', 'length', 'max'=>1),
			array('fec, modulation, lp_code_rate, guard_interval, constellation, hierarchy, hp_code_rate, mod_sys, sistandard', 'length', 'max'=>10),
			array('rolloff', 'length', 'max'=>4),
			array('default_authority', 'length', 'max'=>32),
			array('sourceid, transportid, networkid, frequency, inversion, symbolrate, fec, polarity, modulation, bandwidth, lp_code_rate, transmission_mode, guard_interval, visible, constellation, hierarchy, hp_code_rate, mod_sys, rolloff, sistandard, serviceversion, default_authority', 'default', 'setOnEmpty' => true, 'value' => null),
			array('mplexid, sourceid, transportid, networkid, frequency, inversion, symbolrate, fec, polarity, modulation, bandwidth, lp_code_rate, transmission_mode, guard_interval, visible, constellation, hierarchy, hp_code_rate, mod_sys, rolloff, sistandard, serviceversion, updatetimestamp, default_authority', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'mplexid' => Yii::t('app', 'Mplexid'),
			'sourceid' => Yii::t('app', 'Sourceid'),
			'transportid' => Yii::t('app', 'Transportid'),
			'networkid' => Yii::t('app', 'Networkid'),
			'frequency' => Yii::t('app', 'Frequency'),
			'inversion' => Yii::t('app', 'Inversion'),
			'symbolrate' => Yii::t('app', 'Symbolrate'),
			'fec' => Yii::t('app', 'Fec'),
			'polarity' => Yii::t('app', 'Polarity'),
			'modulation' => Yii::t('app', 'Modulation'),
			'bandwidth' => Yii::t('app', 'Bandwidth'),
			'lp_code_rate' => Yii::t('app', 'Lp Code Rate'),
			'transmission_mode' => Yii::t('app', 'Transmission Mode'),
			'guard_interval' => Yii::t('app', 'Guard Interval'),
			'visible' => Yii::t('app', 'Visible'),
			'constellation' => Yii::t('app', 'Constellation'),
			'hierarchy' => Yii::t('app', 'Hierarchy'),
			'hp_code_rate' => Yii::t('app', 'Hp Code Rate'),
			'mod_sys' => Yii::t('app', 'Mod Sys'),
			'rolloff' => Yii::t('app', 'Rolloff'),
			'sistandard' => Yii::t('app', 'Sistandard'),
			'serviceversion' => Yii::t('app', 'Serviceversion'),
			'updatetimestamp' => Yii::t('app', 'Updatetimestamp'),
			'default_authority' => Yii::t('app', 'Default Authority'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('mplexid', $this->mplexid);
		$criteria->compare('sourceid', $this->sourceid);
		$criteria->compare('transportid', $this->transportid);
		$criteria->compare('networkid', $this->networkid);
		$criteria->compare('frequency', $this->frequency);
		$criteria->compare('inversion', $this->inversion, true);
		$criteria->compare('symbolrate', $this->symbolrate);
		$criteria->compare('fec', $this->fec, true);
		$criteria->compare('polarity', $this->polarity, true);
		$criteria->compare('modulation', $this->modulation, true);
		$criteria->compare('bandwidth', $this->bandwidth, true);
		$criteria->compare('lp_code_rate', $this->lp_code_rate, true);
		$criteria->compare('transmission_mode', $this->transmission_mode, true);
		$criteria->compare('guard_interval', $this->guard_interval, true);
		$criteria->compare('visible', $this->visible);
		$criteria->compare('constellation', $this->constellation, true);
		$criteria->compare('hierarchy', $this->hierarchy, true);
		$criteria->compare('hp_code_rate', $this->hp_code_rate, true);
		$criteria->compare('mod_sys', $this->mod_sys, true);
		$criteria->compare('rolloff', $this->rolloff, true);
		$criteria->compare('sistandard', $this->sistandard, true);
		$criteria->compare('serviceversion', $this->serviceversion);
		$criteria->compare('updatetimestamp', $this->updatetimestamp, true);
		$criteria->compare('default_authority', $this->default_authority, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}