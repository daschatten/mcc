<?php

/**
 * This is the model base class for the table "music_albumart".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "MusicAlbumart".
 *
 * Columns in table "music_albumart" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $albumart_id
 * @property string $filename
 * @property integer $directory_id
 * @property integer $imagetype
 * @property integer $song_id
 * @property integer $embedded
 *
 */
abstract class BaseMusicAlbumart extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'music_albumart';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'MusicAlbumart|MusicAlbumarts', $n);
	}

	public static function representingColumn() {
		return 'filename';
	}

	public function rules() {
		return array(
			array('directory_id, imagetype, song_id, embedded', 'numerical', 'integerOnly'=>true),
			array('filename', 'length', 'max'=>255),
			array('filename, directory_id, imagetype, song_id, embedded', 'default', 'setOnEmpty' => true, 'value' => null),
			array('albumart_id, filename, directory_id, imagetype, song_id, embedded', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'albumart_id' => Yii::t('app', 'Albumart'),
			'filename' => Yii::t('app', 'Filename'),
			'directory_id' => Yii::t('app', 'Directory'),
			'imagetype' => Yii::t('app', 'Imagetype'),
			'song_id' => Yii::t('app', 'Song'),
			'embedded' => Yii::t('app', 'Embedded'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('albumart_id', $this->albumart_id);
		$criteria->compare('filename', $this->filename, true);
		$criteria->compare('directory_id', $this->directory_id);
		$criteria->compare('imagetype', $this->imagetype);
		$criteria->compare('song_id', $this->song_id);
		$criteria->compare('embedded', $this->embedded);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}