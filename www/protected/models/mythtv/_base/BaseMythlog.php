<?php

/**
 * This is the model base class for the table "mythlog".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Mythlog".
 *
 * Columns in table "mythlog" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $logid
 * @property string $module
 * @property integer $priority
 * @property integer $acknowledged
 * @property string $logdate
 * @property string $host
 * @property string $message
 * @property string $details
 *
 */
abstract class BaseMythlog extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'mythlog';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Mythlog|Mythlogs', $n);
	}

	public static function representingColumn() {
		return 'module';
	}

	public function rules() {
		return array(
			array('priority, acknowledged', 'numerical', 'integerOnly'=>true),
			array('module', 'length', 'max'=>32),
			array('host', 'length', 'max'=>128),
			array('message', 'length', 'max'=>255),
			array('details', 'length', 'max'=>16000),
			array('logdate', 'safe'),
			array('module, priority, acknowledged, logdate, host, message, details', 'default', 'setOnEmpty' => true, 'value' => null),
			array('logid, module, priority, acknowledged, logdate, host, message, details', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'logid' => Yii::t('app', 'Logid'),
			'module' => Yii::t('app', 'Module'),
			'priority' => Yii::t('app', 'Priority'),
			'acknowledged' => Yii::t('app', 'Acknowledged'),
			'logdate' => Yii::t('app', 'Logdate'),
			'host' => Yii::t('app', 'Host'),
			'message' => Yii::t('app', 'Message'),
			'details' => Yii::t('app', 'Details'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('logid', $this->logid, true);
		$criteria->compare('module', $this->module, true);
		$criteria->compare('priority', $this->priority);
		$criteria->compare('acknowledged', $this->acknowledged);
		$criteria->compare('logdate', $this->logdate, true);
		$criteria->compare('host', $this->host, true);
		$criteria->compare('message', $this->message, true);
		$criteria->compare('details', $this->details, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}