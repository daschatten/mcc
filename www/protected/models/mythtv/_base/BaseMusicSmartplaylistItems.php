<?php

/**
 * This is the model base class for the table "music_smartplaylist_items".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "MusicSmartplaylistItems".
 *
 * Columns in table "music_smartplaylist_items" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $smartplaylistitemid
 * @property string $smartplaylistid
 * @property string $field
 * @property string $operator
 * @property string $value1
 * @property string $value2
 *
 */
abstract class BaseMusicSmartplaylistItems extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'music_smartplaylist_items';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'MusicSmartplaylistItems|MusicSmartplaylistItems', $n);
	}

	public static function representingColumn() {
		return 'field';
	}

	public function rules() {
		return array(
			array('smartplaylistid, field, operator, value1, value2', 'required'),
			array('smartplaylistid', 'length', 'max'=>10),
			array('field', 'length', 'max'=>50),
			array('operator', 'length', 'max'=>20),
			array('value1, value2', 'length', 'max'=>255),
			array('smartplaylistitemid, smartplaylistid, field, operator, value1, value2', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'smartplaylistitemid' => Yii::t('app', 'Smartplaylistitemid'),
			'smartplaylistid' => Yii::t('app', 'Smartplaylistid'),
			'field' => Yii::t('app', 'Field'),
			'operator' => Yii::t('app', 'Operator'),
			'value1' => Yii::t('app', 'Value1'),
			'value2' => Yii::t('app', 'Value2'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('smartplaylistitemid', $this->smartplaylistitemid, true);
		$criteria->compare('smartplaylistid', $this->smartplaylistid, true);
		$criteria->compare('field', $this->field, true);
		$criteria->compare('operator', $this->operator, true);
		$criteria->compare('value1', $this->value1, true);
		$criteria->compare('value2', $this->value2, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}