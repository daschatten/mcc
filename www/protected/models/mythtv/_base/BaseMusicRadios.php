<?php

/**
 * This is the model base class for the table "music_radios".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "MusicRadios".
 *
 * Columns in table "music_radios" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $intid
 * @property string $station
 * @property string $channel
 * @property string $url
 * @property string $logourl
 * @property string $genre
 * @property string $metaformat
 * @property string $format
 *
 */
abstract class BaseMusicRadios extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'music_radios';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'MusicRadios|MusicRadioses', $n);
	}

	public static function representingColumn() {
		return 'station';
	}

	public function rules() {
		return array(
			array('station, channel, url, logourl, genre, metaformat, format', 'required'),
			array('station, channel, url, logourl, genre, metaformat', 'length', 'max'=>128),
			array('format', 'length', 'max'=>10),
			array('intid, station, channel, url, logourl, genre, metaformat, format', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'intid' => Yii::t('app', 'Intid'),
			'station' => Yii::t('app', 'Station'),
			'channel' => Yii::t('app', 'Channel'),
			'url' => Yii::t('app', 'Url'),
			'logourl' => Yii::t('app', 'Logourl'),
			'genre' => Yii::t('app', 'Genre'),
			'metaformat' => Yii::t('app', 'Metaformat'),
			'format' => Yii::t('app', 'Format'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('intid', $this->intid, true);
		$criteria->compare('station', $this->station, true);
		$criteria->compare('channel', $this->channel, true);
		$criteria->compare('url', $this->url, true);
		$criteria->compare('logourl', $this->logourl, true);
		$criteria->compare('genre', $this->genre, true);
		$criteria->compare('metaformat', $this->metaformat, true);
		$criteria->compare('format', $this->format, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}