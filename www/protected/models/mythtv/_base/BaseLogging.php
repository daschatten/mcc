<?php

/**
 * This is the model base class for the table "logging".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Logging".
 *
 * Columns in table "logging" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $id
 * @property string $host
 * @property string $application
 * @property integer $pid
 * @property integer $tid
 * @property string $thread
 * @property string $filename
 * @property integer $line
 * @property string $function
 * @property string $msgtime
 * @property integer $level
 * @property string $message
 *
 */
abstract class BaseLogging extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'logging';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Logging|Loggings', $n);
	}

	public static function representingColumn() {
		return 'host';
	}

	public function rules() {
		return array(
			array('msgtime, message', 'required'),
			array('pid, tid, line, level', 'numerical', 'integerOnly'=>true),
			array('host, application, thread', 'length', 'max'=>64),
			array('filename, function', 'length', 'max'=>255),
			array('message', 'length', 'max'=>2048),
			array('host, application, pid, tid, thread, filename, line, function, level', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, host, application, pid, tid, thread, filename, line, function, msgtime, level, message', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'host' => Yii::t('app', 'Host'),
			'application' => Yii::t('app', 'Application'),
			'pid' => Yii::t('app', 'Pid'),
			'tid' => Yii::t('app', 'Tid'),
			'thread' => Yii::t('app', 'Thread'),
			'filename' => Yii::t('app', 'Filename'),
			'line' => Yii::t('app', 'Line'),
			'function' => Yii::t('app', 'Function'),
			'msgtime' => Yii::t('app', 'Msgtime'),
			'level' => Yii::t('app', 'Level'),
			'message' => Yii::t('app', 'Message'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('host', $this->host, true);
		$criteria->compare('application', $this->application, true);
		$criteria->compare('pid', $this->pid);
		$criteria->compare('tid', $this->tid);
		$criteria->compare('thread', $this->thread, true);
		$criteria->compare('filename', $this->filename, true);
		$criteria->compare('line', $this->line);
		$criteria->compare('function', $this->function, true);
		$criteria->compare('msgtime', $this->msgtime, true);
		$criteria->compare('level', $this->level);
		$criteria->compare('message', $this->message, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}