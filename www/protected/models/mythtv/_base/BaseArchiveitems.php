<?php

/**
 * This is the model base class for the table "archiveitems".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Archiveitems".
 *
 * Columns in table "archiveitems" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $intid
 * @property string $type
 * @property string $title
 * @property string $subtitle
 * @property string $description
 * @property string $startdate
 * @property string $starttime
 * @property string $size
 * @property string $filename
 * @property integer $hascutlist
 * @property string $cutlist
 * @property string $duration
 * @property string $cutduration
 * @property string $videowidth
 * @property string $videoheight
 * @property string $filecodec
 * @property string $videocodec
 * @property string $encoderprofile
 *
 */
abstract class BaseArchiveitems extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'archiveitems';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Archiveitems|Archiveitems', $n);
	}

	public static function representingColumn() {
		return 'filename';
	}

	public function rules() {
		return array(
			array('size, filename', 'required'),
			array('hascutlist', 'numerical', 'integerOnly'=>true),
			array('title, subtitle', 'length', 'max'=>128),
			array('startdate, starttime', 'length', 'max'=>30),
			array('size', 'length', 'max'=>20),
			array('duration, cutduration, videowidth, videoheight', 'length', 'max'=>10),
			array('filecodec, videocodec, encoderprofile', 'length', 'max'=>50),
			array('type, description, cutlist', 'safe'),
			array('type, title, subtitle, description, startdate, starttime, hascutlist, cutlist, duration, cutduration, videowidth, videoheight, filecodec, videocodec, encoderprofile', 'default', 'setOnEmpty' => true, 'value' => null),
			array('intid, type, title, subtitle, description, startdate, starttime, size, filename, hascutlist, cutlist, duration, cutduration, videowidth, videoheight, filecodec, videocodec, encoderprofile', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'intid' => Yii::t('app', 'Intid'),
			'type' => Yii::t('app', 'Type'),
			'title' => Yii::t('app', 'Title'),
			'subtitle' => Yii::t('app', 'Subtitle'),
			'description' => Yii::t('app', 'Description'),
			'startdate' => Yii::t('app', 'Startdate'),
			'starttime' => Yii::t('app', 'Starttime'),
			'size' => Yii::t('app', 'Size'),
			'filename' => Yii::t('app', 'Filename'),
			'hascutlist' => Yii::t('app', 'Hascutlist'),
			'cutlist' => Yii::t('app', 'Cutlist'),
			'duration' => Yii::t('app', 'Duration'),
			'cutduration' => Yii::t('app', 'Cutduration'),
			'videowidth' => Yii::t('app', 'Videowidth'),
			'videoheight' => Yii::t('app', 'Videoheight'),
			'filecodec' => Yii::t('app', 'Filecodec'),
			'videocodec' => Yii::t('app', 'Videocodec'),
			'encoderprofile' => Yii::t('app', 'Encoderprofile'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('intid', $this->intid, true);
		$criteria->compare('type', $this->type, true);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('subtitle', $this->subtitle, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('startdate', $this->startdate, true);
		$criteria->compare('starttime', $this->starttime, true);
		$criteria->compare('size', $this->size, true);
		$criteria->compare('filename', $this->filename, true);
		$criteria->compare('hascutlist', $this->hascutlist);
		$criteria->compare('cutlist', $this->cutlist, true);
		$criteria->compare('duration', $this->duration, true);
		$criteria->compare('cutduration', $this->cutduration, true);
		$criteria->compare('videowidth', $this->videowidth, true);
		$criteria->compare('videoheight', $this->videoheight, true);
		$criteria->compare('filecodec', $this->filecodec, true);
		$criteria->compare('videocodec', $this->videocodec, true);
		$criteria->compare('encoderprofile', $this->encoderprofile, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}