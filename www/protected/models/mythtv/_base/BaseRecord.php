<?php

/**
 * This is the model base class for the table "record".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Record".
 *
 * Columns in table "record" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $recordid
 * @property string $type
 * @property string $chanid
 * @property string $starttime
 * @property string $startdate
 * @property string $endtime
 * @property string $enddate
 * @property string $title
 * @property string $subtitle
 * @property string $description
 * @property integer $season
 * @property integer $episode
 * @property string $category
 * @property string $profile
 * @property integer $recpriority
 * @property integer $autoexpire
 * @property integer $maxepisodes
 * @property integer $maxnewest
 * @property integer $startoffset
 * @property integer $endoffset
 * @property string $recgroup
 * @property integer $dupmethod
 * @property integer $dupin
 * @property string $station
 * @property string $seriesid
 * @property string $programid
 * @property string $inetref
 * @property string $search
 * @property integer $autotranscode
 * @property integer $autocommflag
 * @property integer $autouserjob1
 * @property integer $autouserjob2
 * @property integer $autouserjob3
 * @property integer $autouserjob4
 * @property integer $autometadata
 * @property integer $findday
 * @property string $findtime
 * @property integer $findid
 * @property integer $inactive
 * @property integer $parentid
 * @property integer $transcoder
 * @property string $playgroup
 * @property integer $prefinput
 * @property string $next_record
 * @property string $last_record
 * @property string $last_delete
 * @property string $storagegroup
 * @property integer $avg_delay
 * @property string $filter
 *
 */
abstract class BaseRecord extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'record';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Record|Records', $n);
	}

	public static function representingColumn() {
		return 'starttime';
	}

	public function rules() {
		return array(
			array('season, episode, inetref, next_record, last_record, last_delete', 'required'),
			array('season, episode, recpriority, autoexpire, maxepisodes, maxnewest, startoffset, endoffset, dupmethod, dupin, autotranscode, autocommflag, autouserjob1, autouserjob2, autouserjob3, autouserjob4, autometadata, findday, findid, inactive, parentid, transcoder, prefinput, avg_delay', 'numerical', 'integerOnly'=>true),
			array('type, chanid, search, filter', 'length', 'max'=>10),
			array('title, subtitle, profile', 'length', 'max'=>128),
			array('description', 'length', 'max'=>16000),
			array('category', 'length', 'max'=>64),
			array('recgroup, playgroup, storagegroup', 'length', 'max'=>32),
			array('station', 'length', 'max'=>20),
			array('seriesid, programid, inetref', 'length', 'max'=>40),
			array('starttime, startdate, endtime, enddate, findtime', 'safe'),
			array('type, chanid, starttime, startdate, endtime, enddate, title, subtitle, description, category, profile, recpriority, autoexpire, maxepisodes, maxnewest, startoffset, endoffset, recgroup, dupmethod, dupin, station, seriesid, programid, search, autotranscode, autocommflag, autouserjob1, autouserjob2, autouserjob3, autouserjob4, autometadata, findday, findtime, findid, inactive, parentid, transcoder, playgroup, prefinput, storagegroup, avg_delay, filter', 'default', 'setOnEmpty' => true, 'value' => null),
			array('recordid, type, chanid, starttime, startdate, endtime, enddate, title, subtitle, description, season, episode, category, profile, recpriority, autoexpire, maxepisodes, maxnewest, startoffset, endoffset, recgroup, dupmethod, dupin, station, seriesid, programid, inetref, search, autotranscode, autocommflag, autouserjob1, autouserjob2, autouserjob3, autouserjob4, autometadata, findday, findtime, findid, inactive, parentid, transcoder, playgroup, prefinput, next_record, last_record, last_delete, storagegroup, avg_delay, filter', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'recordid' => Yii::t('app', 'Recordid'),
			'type' => Yii::t('app', 'Type'),
			'chanid' => Yii::t('app', 'Chanid'),
			'starttime' => Yii::t('app', 'Starttime'),
			'startdate' => Yii::t('app', 'Startdate'),
			'endtime' => Yii::t('app', 'Endtime'),
			'enddate' => Yii::t('app', 'Enddate'),
			'title' => Yii::t('app', 'Title'),
			'subtitle' => Yii::t('app', 'Subtitle'),
			'description' => Yii::t('app', 'Description'),
			'season' => Yii::t('app', 'Season'),
			'episode' => Yii::t('app', 'Episode'),
			'category' => Yii::t('app', 'Category'),
			'profile' => Yii::t('app', 'Profile'),
			'recpriority' => Yii::t('app', 'Recpriority'),
			'autoexpire' => Yii::t('app', 'Autoexpire'),
			'maxepisodes' => Yii::t('app', 'Maxepisodes'),
			'maxnewest' => Yii::t('app', 'Maxnewest'),
			'startoffset' => Yii::t('app', 'Startoffset'),
			'endoffset' => Yii::t('app', 'Endoffset'),
			'recgroup' => Yii::t('app', 'Recgroup'),
			'dupmethod' => Yii::t('app', 'Dupmethod'),
			'dupin' => Yii::t('app', 'Dupin'),
			'station' => Yii::t('app', 'Station'),
			'seriesid' => Yii::t('app', 'Seriesid'),
			'programid' => Yii::t('app', 'Programid'),
			'inetref' => Yii::t('app', 'Inetref'),
			'search' => Yii::t('app', 'Search'),
			'autotranscode' => Yii::t('app', 'Autotranscode'),
			'autocommflag' => Yii::t('app', 'Autocommflag'),
			'autouserjob1' => Yii::t('app', 'Autouserjob1'),
			'autouserjob2' => Yii::t('app', 'Autouserjob2'),
			'autouserjob3' => Yii::t('app', 'Autouserjob3'),
			'autouserjob4' => Yii::t('app', 'Autouserjob4'),
			'autometadata' => Yii::t('app', 'Autometadata'),
			'findday' => Yii::t('app', 'Findday'),
			'findtime' => Yii::t('app', 'Findtime'),
			'findid' => Yii::t('app', 'Findid'),
			'inactive' => Yii::t('app', 'Inactive'),
			'parentid' => Yii::t('app', 'Parentid'),
			'transcoder' => Yii::t('app', 'Transcoder'),
			'playgroup' => Yii::t('app', 'Playgroup'),
			'prefinput' => Yii::t('app', 'Prefinput'),
			'next_record' => Yii::t('app', 'Next Record'),
			'last_record' => Yii::t('app', 'Last Record'),
			'last_delete' => Yii::t('app', 'Last Delete'),
			'storagegroup' => Yii::t('app', 'Storagegroup'),
			'avg_delay' => Yii::t('app', 'Avg Delay'),
			'filter' => Yii::t('app', 'Filter'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('recordid', $this->recordid, true);
		$criteria->compare('type', $this->type, true);
		$criteria->compare('chanid', $this->chanid, true);
		$criteria->compare('starttime', $this->starttime, true);
		$criteria->compare('startdate', $this->startdate, true);
		$criteria->compare('endtime', $this->endtime, true);
		$criteria->compare('enddate', $this->enddate, true);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('subtitle', $this->subtitle, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('season', $this->season);
		$criteria->compare('episode', $this->episode);
		$criteria->compare('category', $this->category, true);
		$criteria->compare('profile', $this->profile, true);
		$criteria->compare('recpriority', $this->recpriority);
		$criteria->compare('autoexpire', $this->autoexpire);
		$criteria->compare('maxepisodes', $this->maxepisodes);
		$criteria->compare('maxnewest', $this->maxnewest);
		$criteria->compare('startoffset', $this->startoffset);
		$criteria->compare('endoffset', $this->endoffset);
		$criteria->compare('recgroup', $this->recgroup, true);
		$criteria->compare('dupmethod', $this->dupmethod);
		$criteria->compare('dupin', $this->dupin);
		$criteria->compare('station', $this->station, true);
		$criteria->compare('seriesid', $this->seriesid, true);
		$criteria->compare('programid', $this->programid, true);
		$criteria->compare('inetref', $this->inetref, true);
		$criteria->compare('search', $this->search, true);
		$criteria->compare('autotranscode', $this->autotranscode);
		$criteria->compare('autocommflag', $this->autocommflag);
		$criteria->compare('autouserjob1', $this->autouserjob1);
		$criteria->compare('autouserjob2', $this->autouserjob2);
		$criteria->compare('autouserjob3', $this->autouserjob3);
		$criteria->compare('autouserjob4', $this->autouserjob4);
		$criteria->compare('autometadata', $this->autometadata);
		$criteria->compare('findday', $this->findday);
		$criteria->compare('findtime', $this->findtime, true);
		$criteria->compare('findid', $this->findid);
		$criteria->compare('inactive', $this->inactive);
		$criteria->compare('parentid', $this->parentid);
		$criteria->compare('transcoder', $this->transcoder);
		$criteria->compare('playgroup', $this->playgroup, true);
		$criteria->compare('prefinput', $this->prefinput);
		$criteria->compare('next_record', $this->next_record, true);
		$criteria->compare('last_record', $this->last_record, true);
		$criteria->compare('last_delete', $this->last_delete, true);
		$criteria->compare('storagegroup', $this->storagegroup, true);
		$criteria->compare('avg_delay', $this->avg_delay);
		$criteria->compare('filter', $this->filter, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}