<?php

/**
 * This is the model base class for the table "oldrecorded".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Oldrecorded".
 *
 * Columns in table "oldrecorded" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $chanid
 * @property string $starttime
 * @property string $endtime
 * @property string $title
 * @property string $subtitle
 * @property string $description
 * @property integer $season
 * @property integer $episode
 * @property string $category
 * @property string $seriesid
 * @property string $programid
 * @property string $inetref
 * @property integer $findid
 * @property integer $recordid
 * @property string $station
 * @property string $rectype
 * @property integer $duplicate
 * @property integer $recstatus
 * @property integer $reactivate
 * @property integer $generic
 * @property integer $future
 *
 */
abstract class BaseOldrecorded extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'oldrecorded';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Oldrecorded|Oldrecordeds', $n);
	}

	public static function representingColumn() {
		return 'endtime';
	}

	public function rules() {
		return array(
			array('season, episode, inetref, generic', 'required'),
			array('season, episode, findid, recordid, duplicate, recstatus, reactivate, generic, future', 'numerical', 'integerOnly'=>true),
			array('chanid, rectype', 'length', 'max'=>10),
			array('title, subtitle', 'length', 'max'=>128),
			array('description', 'length', 'max'=>16000),
			array('category', 'length', 'max'=>64),
			array('seriesid, programid, inetref', 'length', 'max'=>40),
			array('station', 'length', 'max'=>20),
			array('endtime', 'safe'),
			array('chanid, starttime, endtime, title, subtitle, description, category, seriesid, programid, findid, recordid, station, rectype, duplicate, recstatus, reactivate, future', 'default', 'setOnEmpty' => true, 'value' => null),
			array('chanid, starttime, endtime, title, subtitle, description, season, episode, category, seriesid, programid, inetref, findid, recordid, station, rectype, duplicate, recstatus, reactivate, generic, future', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'chanid' => Yii::t('app', 'Chanid'),
			'starttime' => Yii::t('app', 'Starttime'),
			'endtime' => Yii::t('app', 'Endtime'),
			'title' => Yii::t('app', 'Title'),
			'subtitle' => Yii::t('app', 'Subtitle'),
			'description' => Yii::t('app', 'Description'),
			'season' => Yii::t('app', 'Season'),
			'episode' => Yii::t('app', 'Episode'),
			'category' => Yii::t('app', 'Category'),
			'seriesid' => Yii::t('app', 'Seriesid'),
			'programid' => Yii::t('app', 'Programid'),
			'inetref' => Yii::t('app', 'Inetref'),
			'findid' => Yii::t('app', 'Findid'),
			'recordid' => Yii::t('app', 'Recordid'),
			'station' => Yii::t('app', 'Station'),
			'rectype' => Yii::t('app', 'Rectype'),
			'duplicate' => Yii::t('app', 'Duplicate'),
			'recstatus' => Yii::t('app', 'Recstatus'),
			'reactivate' => Yii::t('app', 'Reactivate'),
			'generic' => Yii::t('app', 'Generic'),
			'future' => Yii::t('app', 'Future'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('chanid', $this->chanid, true);
		$criteria->compare('starttime', $this->starttime, true);
		$criteria->compare('endtime', $this->endtime, true);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('subtitle', $this->subtitle, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('season', $this->season);
		$criteria->compare('episode', $this->episode);
		$criteria->compare('category', $this->category, true);
		$criteria->compare('seriesid', $this->seriesid, true);
		$criteria->compare('programid', $this->programid, true);
		$criteria->compare('inetref', $this->inetref, true);
		$criteria->compare('findid', $this->findid);
		$criteria->compare('recordid', $this->recordid);
		$criteria->compare('station', $this->station, true);
		$criteria->compare('rectype', $this->rectype, true);
		$criteria->compare('duplicate', $this->duplicate);
		$criteria->compare('recstatus', $this->recstatus);
		$criteria->compare('reactivate', $this->reactivate);
		$criteria->compare('generic', $this->generic);
		$criteria->compare('future', $this->future);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}