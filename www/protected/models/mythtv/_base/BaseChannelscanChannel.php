<?php

/**
 * This is the model base class for the table "channelscan_channel".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ChannelscanChannel".
 *
 * Columns in table "channelscan_channel" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $transportid
 * @property string $scanid
 * @property integer $mplex_id
 * @property string $source_id
 * @property string $channel_id
 * @property string $callsign
 * @property string $service_name
 * @property string $chan_num
 * @property integer $service_id
 * @property string $atsc_major_channel
 * @property string $atsc_minor_channel
 * @property integer $use_on_air_guide
 * @property integer $hidden
 * @property integer $hidden_in_guide
 * @property string $freqid
 * @property string $icon
 * @property string $tvformat
 * @property string $xmltvid
 * @property string $pat_tsid
 * @property string $vct_tsid
 * @property string $vct_chan_tsid
 * @property string $sdt_tsid
 * @property string $orig_netid
 * @property string $netid
 * @property string $si_standard
 * @property integer $in_channels_conf
 * @property integer $in_pat
 * @property integer $in_pmt
 * @property integer $in_vct
 * @property integer $in_nit
 * @property integer $in_sdt
 * @property integer $is_encrypted
 * @property integer $is_data_service
 * @property integer $is_audio_service
 * @property integer $is_opencable
 * @property integer $could_be_opencable
 * @property integer $decryption_status
 * @property string $default_authority
 *
 */
abstract class BaseChannelscanChannel extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'channelscan_channel';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'ChannelscanChannel|ChannelscanChannels', $n);
	}

	public static function representingColumn() {
		return 'callsign';
	}

	public function rules() {
		return array(
			array('transportid, scanid, mplex_id, source_id, si_standard', 'required'),
			array('mplex_id, service_id, use_on_air_guide, hidden, hidden_in_guide, in_channels_conf, in_pat, in_pmt, in_vct, in_nit, in_sdt, is_encrypted, is_data_service, is_audio_service, is_opencable, could_be_opencable, decryption_status', 'numerical', 'integerOnly'=>true),
			array('transportid', 'length', 'max'=>6),
			array('scanid, source_id, channel_id', 'length', 'max'=>3),
			array('callsign', 'length', 'max'=>20),
			array('service_name, xmltvid', 'length', 'max'=>64),
			array('chan_num, freqid, tvformat, si_standard', 'length', 'max'=>10),
			array('atsc_major_channel, atsc_minor_channel', 'length', 'max'=>4),
			array('icon', 'length', 'max'=>255),
			array('pat_tsid, vct_tsid, vct_chan_tsid, sdt_tsid, orig_netid, netid', 'length', 'max'=>5),
			array('default_authority', 'length', 'max'=>32),
			array('channel_id, callsign, service_name, chan_num, service_id, atsc_major_channel, atsc_minor_channel, use_on_air_guide, hidden, hidden_in_guide, freqid, icon, tvformat, xmltvid, pat_tsid, vct_tsid, vct_chan_tsid, sdt_tsid, orig_netid, netid, in_channels_conf, in_pat, in_pmt, in_vct, in_nit, in_sdt, is_encrypted, is_data_service, is_audio_service, is_opencable, could_be_opencable, decryption_status, default_authority', 'default', 'setOnEmpty' => true, 'value' => null),
			array('transportid, scanid, mplex_id, source_id, channel_id, callsign, service_name, chan_num, service_id, atsc_major_channel, atsc_minor_channel, use_on_air_guide, hidden, hidden_in_guide, freqid, icon, tvformat, xmltvid, pat_tsid, vct_tsid, vct_chan_tsid, sdt_tsid, orig_netid, netid, si_standard, in_channels_conf, in_pat, in_pmt, in_vct, in_nit, in_sdt, is_encrypted, is_data_service, is_audio_service, is_opencable, could_be_opencable, decryption_status, default_authority', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'transportid' => Yii::t('app', 'Transportid'),
			'scanid' => Yii::t('app', 'Scanid'),
			'mplex_id' => Yii::t('app', 'Mplex'),
			'source_id' => Yii::t('app', 'Source'),
			'channel_id' => Yii::t('app', 'Channel'),
			'callsign' => Yii::t('app', 'Callsign'),
			'service_name' => Yii::t('app', 'Service Name'),
			'chan_num' => Yii::t('app', 'Chan Num'),
			'service_id' => Yii::t('app', 'Service'),
			'atsc_major_channel' => Yii::t('app', 'Atsc Major Channel'),
			'atsc_minor_channel' => Yii::t('app', 'Atsc Minor Channel'),
			'use_on_air_guide' => Yii::t('app', 'Use On Air Guide'),
			'hidden' => Yii::t('app', 'Hidden'),
			'hidden_in_guide' => Yii::t('app', 'Hidden In Guide'),
			'freqid' => Yii::t('app', 'Freqid'),
			'icon' => Yii::t('app', 'Icon'),
			'tvformat' => Yii::t('app', 'Tvformat'),
			'xmltvid' => Yii::t('app', 'Xmltvid'),
			'pat_tsid' => Yii::t('app', 'Pat Tsid'),
			'vct_tsid' => Yii::t('app', 'Vct Tsid'),
			'vct_chan_tsid' => Yii::t('app', 'Vct Chan Tsid'),
			'sdt_tsid' => Yii::t('app', 'Sdt Tsid'),
			'orig_netid' => Yii::t('app', 'Orig Netid'),
			'netid' => Yii::t('app', 'Netid'),
			'si_standard' => Yii::t('app', 'Si Standard'),
			'in_channels_conf' => Yii::t('app', 'In Channels Conf'),
			'in_pat' => Yii::t('app', 'In Pat'),
			'in_pmt' => Yii::t('app', 'In Pmt'),
			'in_vct' => Yii::t('app', 'In Vct'),
			'in_nit' => Yii::t('app', 'In Nit'),
			'in_sdt' => Yii::t('app', 'In Sdt'),
			'is_encrypted' => Yii::t('app', 'Is Encrypted'),
			'is_data_service' => Yii::t('app', 'Is Data Service'),
			'is_audio_service' => Yii::t('app', 'Is Audio Service'),
			'is_opencable' => Yii::t('app', 'Is Opencable'),
			'could_be_opencable' => Yii::t('app', 'Could Be Opencable'),
			'decryption_status' => Yii::t('app', 'Decryption Status'),
			'default_authority' => Yii::t('app', 'Default Authority'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('transportid', $this->transportid, true);
		$criteria->compare('scanid', $this->scanid, true);
		$criteria->compare('mplex_id', $this->mplex_id);
		$criteria->compare('source_id', $this->source_id, true);
		$criteria->compare('channel_id', $this->channel_id, true);
		$criteria->compare('callsign', $this->callsign, true);
		$criteria->compare('service_name', $this->service_name, true);
		$criteria->compare('chan_num', $this->chan_num, true);
		$criteria->compare('service_id', $this->service_id);
		$criteria->compare('atsc_major_channel', $this->atsc_major_channel, true);
		$criteria->compare('atsc_minor_channel', $this->atsc_minor_channel, true);
		$criteria->compare('use_on_air_guide', $this->use_on_air_guide);
		$criteria->compare('hidden', $this->hidden);
		$criteria->compare('hidden_in_guide', $this->hidden_in_guide);
		$criteria->compare('freqid', $this->freqid, true);
		$criteria->compare('icon', $this->icon, true);
		$criteria->compare('tvformat', $this->tvformat, true);
		$criteria->compare('xmltvid', $this->xmltvid, true);
		$criteria->compare('pat_tsid', $this->pat_tsid, true);
		$criteria->compare('vct_tsid', $this->vct_tsid, true);
		$criteria->compare('vct_chan_tsid', $this->vct_chan_tsid, true);
		$criteria->compare('sdt_tsid', $this->sdt_tsid, true);
		$criteria->compare('orig_netid', $this->orig_netid, true);
		$criteria->compare('netid', $this->netid, true);
		$criteria->compare('si_standard', $this->si_standard, true);
		$criteria->compare('in_channels_conf', $this->in_channels_conf);
		$criteria->compare('in_pat', $this->in_pat);
		$criteria->compare('in_pmt', $this->in_pmt);
		$criteria->compare('in_vct', $this->in_vct);
		$criteria->compare('in_nit', $this->in_nit);
		$criteria->compare('in_sdt', $this->in_sdt);
		$criteria->compare('is_encrypted', $this->is_encrypted);
		$criteria->compare('is_data_service', $this->is_data_service);
		$criteria->compare('is_audio_service', $this->is_audio_service);
		$criteria->compare('is_opencable', $this->is_opencable);
		$criteria->compare('could_be_opencable', $this->could_be_opencable);
		$criteria->compare('decryption_status', $this->decryption_status);
		$criteria->compare('default_authority', $this->default_authority, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}