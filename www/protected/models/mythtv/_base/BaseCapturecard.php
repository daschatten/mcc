<?php

/**
 * This is the model base class for the table "capturecard".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Capturecard".
 *
 * Columns in table "capturecard" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $cardid
 * @property string $videodevice
 * @property string $audiodevice
 * @property string $vbidevice
 * @property string $cardtype
 * @property string $defaultinput
 * @property integer $audioratelimit
 * @property string $hostname
 * @property integer $dvb_swfilter
 * @property integer $dvb_sat_type
 * @property integer $dvb_wait_for_seqstart
 * @property integer $skipbtaudio
 * @property integer $dvb_on_demand
 * @property integer $dvb_diseqc_type
 * @property string $firewire_speed
 * @property string $firewire_model
 * @property string $firewire_connection
 * @property integer $signal_timeout
 * @property integer $channel_timeout
 * @property string $dvb_tuning_delay
 * @property integer $contrast
 * @property integer $brightness
 * @property integer $colour
 * @property integer $hue
 * @property string $diseqcid
 * @property integer $dvb_eitscan
 *
 */
abstract class BaseCapturecard extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'capturecard';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Capturecard|Capturecards', $n);
	}

	public static function representingColumn() {
		return 'videodevice';
	}

	public function rules() {
		return array(
			array('audioratelimit, dvb_swfilter, dvb_sat_type, dvb_wait_for_seqstart, skipbtaudio, dvb_on_demand, dvb_diseqc_type, signal_timeout, channel_timeout, contrast, brightness, colour, hue, dvb_eitscan', 'numerical', 'integerOnly'=>true),
			array('videodevice, audiodevice, vbidevice', 'length', 'max'=>128),
			array('cardtype, defaultinput, firewire_model', 'length', 'max'=>32),
			array('hostname', 'length', 'max'=>64),
			array('firewire_speed, firewire_connection, dvb_tuning_delay, diseqcid', 'length', 'max'=>10),
			array('videodevice, audiodevice, vbidevice, cardtype, defaultinput, audioratelimit, hostname, dvb_swfilter, dvb_sat_type, dvb_wait_for_seqstart, skipbtaudio, dvb_on_demand, dvb_diseqc_type, firewire_speed, firewire_model, firewire_connection, signal_timeout, channel_timeout, dvb_tuning_delay, contrast, brightness, colour, hue, diseqcid, dvb_eitscan', 'default', 'setOnEmpty' => true, 'value' => null),
			array('cardid, videodevice, audiodevice, vbidevice, cardtype, defaultinput, audioratelimit, hostname, dvb_swfilter, dvb_sat_type, dvb_wait_for_seqstart, skipbtaudio, dvb_on_demand, dvb_diseqc_type, firewire_speed, firewire_model, firewire_connection, signal_timeout, channel_timeout, dvb_tuning_delay, contrast, brightness, colour, hue, diseqcid, dvb_eitscan', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'cardid' => Yii::t('app', 'Cardid'),
			'videodevice' => Yii::t('app', 'Videodevice'),
			'audiodevice' => Yii::t('app', 'Audiodevice'),
			'vbidevice' => Yii::t('app', 'Vbidevice'),
			'cardtype' => Yii::t('app', 'Cardtype'),
			'defaultinput' => Yii::t('app', 'Defaultinput'),
			'audioratelimit' => Yii::t('app', 'Audioratelimit'),
			'hostname' => Yii::t('app', 'Hostname'),
			'dvb_swfilter' => Yii::t('app', 'Dvb Swfilter'),
			'dvb_sat_type' => Yii::t('app', 'Dvb Sat Type'),
			'dvb_wait_for_seqstart' => Yii::t('app', 'Dvb Wait For Seqstart'),
			'skipbtaudio' => Yii::t('app', 'Skipbtaudio'),
			'dvb_on_demand' => Yii::t('app', 'Dvb On Demand'),
			'dvb_diseqc_type' => Yii::t('app', 'Dvb Diseqc Type'),
			'firewire_speed' => Yii::t('app', 'Firewire Speed'),
			'firewire_model' => Yii::t('app', 'Firewire Model'),
			'firewire_connection' => Yii::t('app', 'Firewire Connection'),
			'signal_timeout' => Yii::t('app', 'Signal Timeout'),
			'channel_timeout' => Yii::t('app', 'Channel Timeout'),
			'dvb_tuning_delay' => Yii::t('app', 'Dvb Tuning Delay'),
			'contrast' => Yii::t('app', 'Contrast'),
			'brightness' => Yii::t('app', 'Brightness'),
			'colour' => Yii::t('app', 'Colour'),
			'hue' => Yii::t('app', 'Hue'),
			'diseqcid' => Yii::t('app', 'Diseqcid'),
			'dvb_eitscan' => Yii::t('app', 'Dvb Eitscan'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('cardid', $this->cardid, true);
		$criteria->compare('videodevice', $this->videodevice, true);
		$criteria->compare('audiodevice', $this->audiodevice, true);
		$criteria->compare('vbidevice', $this->vbidevice, true);
		$criteria->compare('cardtype', $this->cardtype, true);
		$criteria->compare('defaultinput', $this->defaultinput, true);
		$criteria->compare('audioratelimit', $this->audioratelimit);
		$criteria->compare('hostname', $this->hostname, true);
		$criteria->compare('dvb_swfilter', $this->dvb_swfilter);
		$criteria->compare('dvb_sat_type', $this->dvb_sat_type);
		$criteria->compare('dvb_wait_for_seqstart', $this->dvb_wait_for_seqstart);
		$criteria->compare('skipbtaudio', $this->skipbtaudio);
		$criteria->compare('dvb_on_demand', $this->dvb_on_demand);
		$criteria->compare('dvb_diseqc_type', $this->dvb_diseqc_type);
		$criteria->compare('firewire_speed', $this->firewire_speed, true);
		$criteria->compare('firewire_model', $this->firewire_model, true);
		$criteria->compare('firewire_connection', $this->firewire_connection, true);
		$criteria->compare('signal_timeout', $this->signal_timeout);
		$criteria->compare('channel_timeout', $this->channel_timeout);
		$criteria->compare('dvb_tuning_delay', $this->dvb_tuning_delay, true);
		$criteria->compare('contrast', $this->contrast);
		$criteria->compare('brightness', $this->brightness);
		$criteria->compare('colour', $this->colour);
		$criteria->compare('hue', $this->hue);
		$criteria->compare('diseqcid', $this->diseqcid, true);
		$criteria->compare('dvb_eitscan', $this->dvb_eitscan);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}