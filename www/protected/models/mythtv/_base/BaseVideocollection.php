<?php

/**
 * This is the model base class for the table "videocollection".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Videocollection".
 *
 * Columns in table "videocollection" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $intid
 * @property string $title
 * @property string $contenttype
 * @property string $plot
 * @property string $network
 * @property string $collectionref
 * @property string $certification
 * @property string $genre
 * @property string $releasedate
 * @property string $language
 * @property string $status
 * @property double $rating
 * @property integer $ratingcount
 * @property integer $runtime
 * @property string $banner
 * @property string $fanart
 * @property string $coverart
 *
 */
abstract class BaseVideocollection extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'videocollection';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Videocollection|Videocollections', $n);
	}

	public static function representingColumn() {
		return 'title';
	}

	public function rules() {
		return array(
			array('title, collectionref', 'required'),
			array('ratingcount, runtime', 'numerical', 'integerOnly'=>true),
			array('rating', 'numerical'),
			array('title', 'length', 'max'=>256),
			array('network, collectionref, certification, genre', 'length', 'max'=>128),
			array('language', 'length', 'max'=>10),
			array('status', 'length', 'max'=>64),
			array('contenttype, plot, releasedate, banner, fanart, coverart', 'safe'),
			array('contenttype, plot, network, certification, genre, releasedate, language, status, rating, ratingcount, runtime, banner, fanart, coverart', 'default', 'setOnEmpty' => true, 'value' => null),
			array('intid, title, contenttype, plot, network, collectionref, certification, genre, releasedate, language, status, rating, ratingcount, runtime, banner, fanart, coverart', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'intid' => Yii::t('app', 'Intid'),
			'title' => Yii::t('app', 'Title'),
			'contenttype' => Yii::t('app', 'Contenttype'),
			'plot' => Yii::t('app', 'Plot'),
			'network' => Yii::t('app', 'Network'),
			'collectionref' => Yii::t('app', 'Collectionref'),
			'certification' => Yii::t('app', 'Certification'),
			'genre' => Yii::t('app', 'Genre'),
			'releasedate' => Yii::t('app', 'Releasedate'),
			'language' => Yii::t('app', 'Language'),
			'status' => Yii::t('app', 'Status'),
			'rating' => Yii::t('app', 'Rating'),
			'ratingcount' => Yii::t('app', 'Ratingcount'),
			'runtime' => Yii::t('app', 'Runtime'),
			'banner' => Yii::t('app', 'Banner'),
			'fanart' => Yii::t('app', 'Fanart'),
			'coverart' => Yii::t('app', 'Coverart'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('intid', $this->intid, true);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('contenttype', $this->contenttype, true);
		$criteria->compare('plot', $this->plot, true);
		$criteria->compare('network', $this->network, true);
		$criteria->compare('collectionref', $this->collectionref, true);
		$criteria->compare('certification', $this->certification, true);
		$criteria->compare('genre', $this->genre, true);
		$criteria->compare('releasedate', $this->releasedate, true);
		$criteria->compare('language', $this->language, true);
		$criteria->compare('status', $this->status, true);
		$criteria->compare('rating', $this->rating);
		$criteria->compare('ratingcount', $this->ratingcount);
		$criteria->compare('runtime', $this->runtime);
		$criteria->compare('banner', $this->banner, true);
		$criteria->compare('fanart', $this->fanart, true);
		$criteria->compare('coverart', $this->coverart, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}