<?php

/**
 * This is the model base class for the table "weatherscreens".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Weatherscreens".
 *
 * Columns in table "weatherscreens" available as properties of the model,
 * followed by relations of table "weatherscreens" available as properties of the model.
 *
 * @property string $screen_id
 * @property string $draworder
 * @property string $container
 * @property string $hostname
 * @property integer $units
 *
 * @property Weatherdatalayout[] $weatherdatalayouts
 */
abstract class BaseWeatherscreens extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'weatherscreens';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Weatherscreens|Weatherscreens', $n);
	}

	public static function representingColumn() {
		return 'container';
	}

	public function rules() {
		return array(
			array('draworder, container, units', 'required'),
			array('units', 'numerical', 'integerOnly'=>true),
			array('draworder', 'length', 'max'=>10),
			array('container, hostname', 'length', 'max'=>64),
			array('hostname', 'default', 'setOnEmpty' => true, 'value' => null),
			array('screen_id, draworder, container, hostname, units', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'weatherdatalayouts' => array(self::HAS_MANY, 'Weatherdatalayout', 'weatherscreens_screen_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'screen_id' => Yii::t('app', 'Screen'),
			'draworder' => Yii::t('app', 'Draworder'),
			'container' => Yii::t('app', 'Container'),
			'hostname' => Yii::t('app', 'Hostname'),
			'units' => Yii::t('app', 'Units'),
			'weatherdatalayouts' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('screen_id', $this->screen_id, true);
		$criteria->compare('draworder', $this->draworder, true);
		$criteria->compare('container', $this->container, true);
		$criteria->compare('hostname', $this->hostname, true);
		$criteria->compare('units', $this->units);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}