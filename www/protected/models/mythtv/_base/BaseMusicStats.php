<?php

/**
 * This is the model base class for the table "music_stats".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "MusicStats".
 *
 * Columns in table "music_stats" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $num_artists
 * @property integer $num_albums
 * @property integer $num_songs
 * @property integer $num_genres
 * @property string $total_time
 * @property string $total_size
 *
 */
abstract class BaseMusicStats extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'music_stats';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'MusicStats|MusicStats', $n);
	}

	public static function representingColumn() {
		return 'total_time';
	}

	public function rules() {
		return array(
			array('num_artists, num_albums, num_songs, num_genres', 'numerical', 'integerOnly'=>true),
			array('total_time', 'length', 'max'=>12),
			array('total_size', 'length', 'max'=>10),
			array('num_artists, num_albums, num_songs, num_genres, total_time, total_size', 'default', 'setOnEmpty' => true, 'value' => null),
			array('num_artists, num_albums, num_songs, num_genres, total_time, total_size', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'num_artists' => Yii::t('app', 'Num Artists'),
			'num_albums' => Yii::t('app', 'Num Albums'),
			'num_songs' => Yii::t('app', 'Num Songs'),
			'num_genres' => Yii::t('app', 'Num Genres'),
			'total_time' => Yii::t('app', 'Total Time'),
			'total_size' => Yii::t('app', 'Total Size'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('num_artists', $this->num_artists);
		$criteria->compare('num_albums', $this->num_albums);
		$criteria->compare('num_songs', $this->num_songs);
		$criteria->compare('num_genres', $this->num_genres);
		$criteria->compare('total_time', $this->total_time, true);
		$criteria->compare('total_size', $this->total_size, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}